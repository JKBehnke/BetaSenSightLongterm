""" main_class"""


# import packages
import os 
from dataclasses import dataclass, field
import pandas as pd
from numpy import array

import analysis.find_folders as find_folders
import analysis.loadResults as loadResults
import analysis.classesResults.metadata_class as metadata



@dataclass(init=True, repr=True) 
class mainAnalysisClass:
    """
    Main analysis class to store results
    
    parameters:
 
        - incl_sub: str e.g. "024"
        - incl_session: list ["postop", "fu3m", "fu12m", "fu18m", "fu24m"]
        - incl_condition: list e.g. ["m0s0", "m1s0"]
        - incl_contact: a list of contacts to include ["RingR", "SegmIntraR", "SegmInterR", "RingL", "SegmIntraL", "SegmInterL"]
        - pickChannels: list of bipolar channels, depending on which incl_contact was chosen
                        Ring: ['03', '13', '02', '12', '01', '23']
                        SegmIntra: ['1A1B', '1B1C', '1A1C', '2A2B', '2B2C', '2A2C']
                        SegmInter: ['1A2A', '1B2B', '1C2C']
        - hemisphere: str e.g. "Right"
        - normalization: str "rawPSD", "normPsdToTotalSum", "normPsdToSum1_100Hz", "normPsdToSum40_90Hz"
        - filter: str "unfiltered", "band-pass"
        - result: str "PowerSpectrum", "PSDaverageFrequencyBands", "PeakParameters"

    post-initialized parameters:
    
    Returns:
        - 
    """

    # these fields will be initialized 
    sub: str             # note that : is used, not =  
    hemisphere: str 
    filter: str
    normalization: str
    result: list
    incl_session: list = field(default_factory=lambda: ["postop", "fu3m", "fu12m", "fu18m", "fu24m"]) # default:_ if no input is given -> automatically input the full list
    incl_condition: list = field(default_factory=lambda: ["m0s0", "m1s0"])
    incl_contact: list = field(default_factory=lambda: ["RingR", "SegmIntraR", "SegmInterR", 
                                                        "RingL", "SegmIntraL", "SegmInterL"])
    pickChannels: list = field(default_factory=lambda: ['03', '13', '02', '12', '01', '23', 
                                                        '1A1B', '1B1C', '1A1C', '2A2B', '2B2C', '2A2C', 
                                                        '1A2A', '1B2B', '1C2C'])
    
    
    

    def __post_init__(self,):

        allowed_results = ["PowerSpectrum", "PSDaverageFrequencyBands", "PeakParameters"]

        # Check if result is inserted correctly
        for json in self.results:

            assert json in allowed_results, (
                f'inserted result ({json}) should'
                f' be in {allowed_results}'
            )

        # path to results folder of the subject
        self.sub_results_path = find_folders.get_local_path(folder="results", sub=self.sub)


        # load the correct json file
        self.jsonResult = loadResults.load_PSDjson(
            sub = self.sub,
            result = self.result,
            normalization = self.normalization,
            hemisphere = self.hemisphere,
            filter = self.filter
        )
    
        # define and store all variables in self.metaClass, from where they can continuously be called and modified from further subclasses
        self.metaClass = metadata.MetadataClass(
            sub = self.sub,
            hemisphere = self.hemisphere,
            filter = self.filter,
            normalization = self.normalization,
            result = self.result,
            incl_session = self.incl_session,
            incl_condition = self.incl_condition,
            incl_contact = self.incl_contact,
            pickChannels = self.pickChannels

        )


        # make a Dataframe from the JSON file to further select
        Result_DF = pd.DataFrame(self.jsonResult)

        return Result_DF


